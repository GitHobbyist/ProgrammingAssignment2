cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
cacheSolve(t(1,2,3,4))
class(t$get())
cacheSolve(t$get())
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
x$getinv <- m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
t$getinv()
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
class(x$getinv)
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
t$getinv()
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
t$getinv()
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
m
x$setinv(m)
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
print(class(m))
print(class(x$setinv(m))
}
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
print(class(m))
print(class(x$setinv(m)))
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2) ) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
class(getinve)
}
cacheSolve <- function(x= matrix(data=numeric(),nrow=2,ncol=2),...) {
m <- solve(x)
x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t$get())
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
class(getinve)
}
cacheSolve <- function(x,...) {
m <- solve(x)
x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x,...) {
m <- solve(x)
x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x,...) {
m <- solve(x)
##x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x,...) {
print(class(x))
m <- solve(x)
print(class(m))
##x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x,...) {
print(class(x))
m <- solve(x$get())
print(class(m))
##x$setinv(m)
m
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
setwd("C:/temp2/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
##m <- solve(x$get())
print(m)
##x$setinv(m)
##m
## Return a matrix that is the inverse of 'x'
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse = matrix(data=numeric(),nrow=2,ncol=2)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
t$getinv()
cacheSolve(t)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
t$geyinv()
t$getinv()
t <- makeCacheMatrix()
t$getinv()
t$setinv()
t$setinv(c(1,2,3,4))
t$getinv()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(inverse) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
t$set(c(0,5,99,66))
t$get()
cacheSolve(t)
solve(t$get())
lapply(c(1,2,3,4),solve)
as.matrix(lapply(c(1,2,3,4),solve))
lapply(c(1,2,3,4),solve,simplify=TRUE)
lapply(c(1,2,3,4),solve,simplify=FALSE)
lapply(c(1,2,3,4),solve,simplify=FALSE)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(data=numeric(),nrow=2,ncol=2)) {
m <- NULL
set <- function(y) {
x <<- matrix(data=y,nrow=2,ncol=2)
m <<- NULL
}
get <- function() x
##setinv <- NULL
setinv <- function(solve(inverse)) m <<- inverse
getinv <- function() m
##print(setinv)
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
t$setinv(c(1,2,3,4))
t$getinv()
t <- makeCacheMatrix()
t$set(c(1,2,3,4))
t$get()
cacheSolve(t)
t$getinv()
solve(4,6,8,10)
solve(c(4,6,8,10)
t<- solve(c(4,6,8,10)
